/* Generated by AN DISI Unibo */ 
package it.unibo.fixedobstaclemanager;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractFixedobstaclemanager extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractFixedobstaclemanager(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/fixedobstaclemanager/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/fixedobstaclemanager/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("waitForFixedObstacle",waitForFixedObstacle);
	    	stateTab.put("handleFixedObstacle1",handleFixedObstacle1);
	    	stateTab.put("wallFound",wallFound);
	    	stateTab.put("handleFixedObstacle2",handleFixedObstacle2);
	    	stateTab.put("completeHandleFixedObstacle",completeHandleFixedObstacle);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "fixedobstaclemanager tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	temporaryStr = "\"[INFO] Inizializzazione fixedObstacleManager\"";
	    	println( temporaryStr );  
	     connectToMqttServer("tcp://192.168.43.84:1883");
	    	//switchTo waitForFixedObstacle
	        switchToPlanAsNextState(pr, myselfName, "fixedobstaclemanager_"+myselfName, 
	              "waitForFixedObstacle",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun waitForFixedObstacle = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_waitForFixedObstacle",0);
	     pr.incNumIter(); 	
	    	String myselfName = "waitForFixedObstacle";  
	    	//bbb
	     msgTransition( pr,myselfName,"fixedobstaclemanager_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleFixedObstacle1") }, 
	          new String[]{"true","E","fixedObstacleFoundEvent" },
	          3600000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_waitForFixedObstacle){  
	    	 println( getName() + " plan=waitForFixedObstacle WARNING:" + e_waitForFixedObstacle.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitForFixedObstacle
	    
	    StateFun handleFixedObstacle1 = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_handleFixedObstacle1",0);
	     pr.incNumIter(); 	
	    	String myselfName = "handleFixedObstacle1";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " not !?stopMove" )) != null )
	    	{
	    	{//actionseq
	    	temporaryStr = "\"[INFO] handleFixedObstacle1 - Aggiro l'ostacolo fisso!\"";
	    	println( temporaryStr );  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " not !?firstWallFound" )) != null )
	    	{
	    	{//actionseq
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotCmd(Y)","robotCmd(\"stop\")", guardVars ).toString();
	    	emit( "robotCmd", temporaryStr );
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(500,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "handleFixedObstacle1";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotCmd(Y)","robotCmd(\"d\")", guardVars ).toString();
	    	emit( "robotCmd", temporaryStr );
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(500,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "handleFixedObstacle1";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotCmd(Y)","robotCmd(\"w\")", guardVars ).toString();
	    	emit( "robotCmd", temporaryStr );
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(800,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "handleFixedObstacle1";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotCmd(Y)","robotCmd(\"a\")", guardVars ).toString();
	    	emit( "robotCmd", temporaryStr );
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(500,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "handleFixedObstacle1";
	    	if( ! aar.getGoon() ) return ;
	    	};//actionseq
	    	}
	    	else{ {//actionseq
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotCmd(Y)","robotCmd(\"stop\")", guardVars ).toString();
	    	emit( "robotCmd", temporaryStr );
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(500,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "handleFixedObstacle1";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotCmd(Y)","robotCmd(\"a\")", guardVars ).toString();
	    	emit( "robotCmd", temporaryStr );
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(500,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "handleFixedObstacle1";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotCmd(Y)","robotCmd(\"a\")", guardVars ).toString();
	    	emit( "robotCmd", temporaryStr );
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(800,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "handleFixedObstacle1";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotCmd(Y)","robotCmd(\"w\")", guardVars ).toString();
	    	emit( "robotCmd", temporaryStr );
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(500,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "handleFixedObstacle1";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotCmd(Y)","robotCmd(\"d\")", guardVars ).toString();
	    	emit( "robotCmd", temporaryStr );
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(500,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "handleFixedObstacle1";
	    	if( ! aar.getGoon() ) return ;
	    	};//actionseq
	    	}};//actionseq
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"fixedobstaclemanager_"+myselfName,false,
	          new StateFun[]{stateTab.get("wallFound") }, 
	          new String[]{"true","E","virtualRobotSonarEvent" },
	          2000, "handleFixedObstacle2" );//msgTransition
	    }catch(Exception e_handleFixedObstacle1){  
	    	 println( getName() + " plan=handleFixedObstacle1 WARNING:" + e_handleFixedObstacle1.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleFixedObstacle1
	    
	    StateFun wallFound = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("wallFound",-1);
	    	String myselfName = "wallFound";  
	    	temporaryStr = "\"[INFO] Primo muro trovato!\"";
	    	println( temporaryStr );  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " not !?firstWallFound" )) != null )
	    	{
	    	temporaryStr = "firstWallFound";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	addRule( temporaryStr );  
	    	}
	    	else{ {//actionseq
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "coreCmdStop","coreCmdStop", guardVars ).toString();
	    	emit( "coreCmdStop", temporaryStr );
	    	temporaryStr = "stopMove";
	    	addRule( temporaryStr );  
	    	temporaryStr = "\"[INFO] Ho ritrovato il muro, ostacolo insormontabile!\"";
	    	println( temporaryStr );  
	    	};//actionseq
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"fixedobstaclemanager_"+myselfName,false,
	          new StateFun[]{}, 
	          new String[]{},
	          1000, "handleFixedObstacle1" );//msgTransition
	    }catch(Exception e_wallFound){  
	    	 println( getName() + " plan=wallFound WARNING:" + e_wallFound.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//wallFound
	    
	    StateFun handleFixedObstacle2 = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_handleFixedObstacle2",0);
	     pr.incNumIter(); 	
	    	String myselfName = "handleFixedObstacle2";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " not !?stopMove" )) != null )
	    	{
	    	{//actionseq
	    	temporaryStr = "\"[INFO] handleFixedObstacle2 - Valuto se ostacolo fisso e' ancora presente...\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotCmd(Y)","robotCmd(\"w\")", guardVars ).toString();
	    	emit( "robotCmd", temporaryStr );
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(500,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "handleFixedObstacle2";
	    	if( ! aar.getGoon() ) return ;
	    	};//actionseq
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"fixedobstaclemanager_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleFixedObstacle1") }, 
	          new String[]{"true","E","realRobotSonarEvent" },
	          1000, "completeHandleFixedObstacle" );//msgTransition
	    }catch(Exception e_handleFixedObstacle2){  
	    	 println( getName() + " plan=handleFixedObstacle2 WARNING:" + e_handleFixedObstacle2.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleFixedObstacle2
	    
	    StateFun completeHandleFixedObstacle = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("completeHandleFixedObstacle",-1);
	    	String myselfName = "completeHandleFixedObstacle";  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " not !?stopMove" )) != null )
	    	{
	    	{//actionseq
	    	temporaryStr = "\"[INFO] completeHandleFixedObstacle - Finisco aggiramento dell'ostacolo fisso!\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotCmd(Y)","robotCmd(\"w\")", guardVars ).toString();
	    	emit( "robotCmd", temporaryStr );
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(800,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "completeHandleFixedObstacle";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotCmd(Y)","robotCmd(\"w\")", guardVars ).toString();
	    	emit( "robotCmd", temporaryStr );
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(800,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "completeHandleFixedObstacle";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotCmd(Y)","robotCmd(\"a\")", guardVars ).toString();
	    	emit( "robotCmd", temporaryStr );
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(500,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "completeHandleFixedObstacle";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotCmd(Y)","robotCmd(\"w\")", guardVars ).toString();
	    	emit( "robotCmd", temporaryStr );
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(800,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "completeHandleFixedObstacle";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "robotCmd(Y)","robotCmd(\"d\")", guardVars ).toString();
	    	emit( "robotCmd", temporaryStr );
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(500,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "completeHandleFixedObstacle";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine, "endRoutineAvoidObstacle","endRoutineAvoidObstacle", guardVars ).toString();
	    	emit( "endRoutineAvoidObstacle", temporaryStr );
	    	temporaryStr = "\"[INFO] handleFixedObstacle - Fine aggiramento!\"";
	    	println( temporaryStr );  
	    	};//actionseq
	    	}
	    	repeatPlanNoTransition(pr,myselfName,"fixedobstaclemanager_"+myselfName,false,false);
	    }catch(Exception e_completeHandleFixedObstacle){  
	    	 println( getName() + " plan=completeHandleFixedObstacle WARNING:" + e_completeHandleFixedObstacle.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//completeHandleFixedObstacle
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
