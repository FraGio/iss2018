System reqAnalysisModel

Event robotCmd : robotCmd ( X )
Event requestNotifier : requestNotifier //le richiede entrambe
Event requestExternalProvider : requestExternalProvider //le richiede entrambe
Event temperatureTimeProviderResponse : temperatureTimeProviderResponse(V,T) //temperatura e tempo

Event temperatureTimeRequest : temperatureTimeRequest(V,T) //temperatura e tempo

pubSubServer "tcp://localhost:1883"
//pubSubServer "tcp://broker.hivemq.com:1883"

Context ctxRobot ip [ host="localhost"   port=8021 ] //-httpserver

QActor mind context ctxRobot -pubsub {   
	Rules {
		limitTemperatureValue( 25 ).
		limitTimeValueMin( 7 ).
		limitTimeValueMax( 10 ).
		
		changedModelAction( temperature, temperaturevalue, V  ):-
				limitTemperatureValue( MAX ), 
	 		    eval( ge, V , MAX ), !,   
	 		    output('temperatura sopra limite!!!!!!!'),
	 			emitevent( robotCmd,  robotCmd ('STOP') ).
	 		
	 	changedModelAction(timer,timevalue, T ):-
				limitTimeValueMin( MIN ),
	 		    eval( le, T , MIN ), !,  
	 		    output('tempo fuori range MIN!!!!!!'),
	 			emitevent( robotCmd,  robotCmd ('STOP') ).
	 			
	 	changedModelAction(timer,timevalue, T ):-
				limitTimeValueMax( MAX ),
	 		    eval( ge, T , MAX ), !,   
	 		    output('tempo fuori range MAX!!!!!!'),
	 			emitevent( robotCmd,  robotCmd ('STOP') ).
	}
	Plan init normal [  
		demo consult("./resourceModel.pl");
		delay 2000;
		emit requestNotifier : requestNotifier
	]  
	switchTo initTempTime
	 
	Plan initTempTime[]
	transition stopAfter 3600000   	//1h 
		whenEvent temperatureTimeRequest -> updateValues
	finally repeatPlan
	 
	Plan doWork[
		println("Robot in attesa...")
	]
	transition stopAfter 3600000   	//1h 
		whenEvent robotCmd -> robotCmdHandler,
		whenEvent temperatureTimeRequest -> updateValues
	finally repeatPlan
	
	
	Plan updateValues [
		println("Aggiornamento valori ...");
		
		onEvent temperatureTimeRequest : temperatureTimeRequest(V,T) 
			-> demo changeModelItems(timer,timevalue,T,temperature,temperaturevalue,V)

	]switchTo doWork
	
	Plan robotCmdHandler [
		onEvent robotCmd : robotCmd('START') -> println("START!");
		onEvent robotCmd : robotCmd('STOP') -> println("STOP!")
	]switchTo doWork
	
}

QActor realrobot context ctxRobot -pubsub {   
	Plan init normal [  
		println("Accensione del real robot completata!")
	]  
	switchTo waitForCmd 
	 
	//Robot attende comandi
	Plan waitForCmd[
		println("Real robot in attesa di comandi!")
	]
	transition stopAfter 3600000   	//1h 
  		//whenEvent robotCmd -> ...
  	finally repeatPlan 
}

QActor sonar1 context ctxRobot -pubsub {   
	  
	Plan init normal [  
		println("sonar 1 START")
	]  //switchTo emitRobotCmd 
  	
  	//simulazione comandi START/STOP
	Plan emitRobotCmd [	
		delay 15000;
		println("Sonar1: robot rilevato");	
		
		//coperto il requisiti R-End
		emit robotCmd : robotCmd("STOP")
	]
}

QActor sonar2 context ctxRobot -pubsub {   
	  
	Plan init normal [  
		println("sonar 2 START")
	] //switchTo emitRobotCmd 
  	
  	//simulazione comandi START/STOP
	Plan emitRobotCmd [	
		delay 15000;
		println("Sonar2: robot rilevato");	
		
		//coperto il requisiti R-End
		emit robotCmd : robotCmd("STOP")
	]
}

QActor notifier context ctxRobot -pubsub {   
	  
	Plan init normal [  
		println("Notifier START")   
	]switchTo waitForFirstRequest
	 
	Plan waitForFirstRequest[]transition stopAfter 3600000   	//1h 
  		whenEvent requestNotifier -> startPolling
  	finally repeatPlan   
  	
  	Plan startPolling resumeLastPlan[
  		delay 3000; //tempo di pausa
		emit requestExternalProvider : requestExternalProvider
	] switchTo waitForResponse
	
	Plan waitForResponse[]transition stopAfter 3600000   	//1h 
  		whenEvent  temperatureTimeProviderResponse -> handleRequestTimeAndTemperature
  	finally repeatPlan 
  	
  	Plan handleRequestTimeAndTemperature [
		onEvent temperatureTimeProviderResponse : temperatureTimeProviderResponse(V,T) 
		-> emit temperatureTimeRequest : temperatureTimeRequest(V,T)
			
		
	] switchTo startPolling
}
