System problemAnalysisModel

Event userCmd : userCmd ( X ) //START - STOP
Event robotCmd : robotCmd ( Y ) // w=avanti, s=indietro, a=sinistra, d=destra
Event coreCmd : coreCmd ( Z ) //START - STOP
Event robotSonarEvent : robotSonarEvent
Event roomSonar1Event : roomSonar1Event ( DISTANCE ) //DISTANCE: DISTANZA DALL'OGGETTO RILEVATO
Event roomSonar2Event : roomSonar2Event ( DISTANCE ) //DISTANCE: DISTANZA DALL'OGGETTO RILEVATO
Event requestNotifier : requestNotifier 
Event requestExternalProvider : requestExternalProvider 
Event temperatureTimeProviderResponse : temperatureTimeProviderResponse(V,T) //temperatura e tempo
Event temperatureTimeRequest : temperatureTimeRequest(V,T) //temperatura e tempo
Event obstacleFound : obstacleFound ( X, Y )

Event ledCmdBlink : ledCmdBlink
Event ledCmdStop : ledCmdStop


pubSubServer "tcp://localhost:1883"
//pubSubServer "tcp://broker.hivemq.com:1883"

Context ctxRobot ip [ host="localhost"   port=8021 ]

QActor mind context ctxRobot -pubsub {   
	Rules {
		limitTemperatureValue( 25 ).
		limitTimeValueMin( 7 ).
		limitTimeValueMax( 10 ).
		
		changedModelAction( temperature, temperaturevalue, V  ):-
				limitTemperatureValue( MAX ), 
	 		    eval( ge, V , MAX ), !,   
	 		    output('temperatura sopra limite!!!!!!!'),
	 			emitevent( robotCmd,  robotCmd ('STOP') ).
	 		
	 	changedModelAction(timer,timevalue, T ):-
				limitTimeValueMin( MIN ),
	 		    eval( le, T , MIN ), !,  
	 		    output('tempo fuori range MIN!!!!!!'),
	 			emitevent( robotCmd,  robotCmd ('STOP') ).
	 			
	 	changedModelAction(timer,timevalue, T ):-
				limitTimeValueMax( MAX ),
	 		    eval( ge, T , MAX ), !,   
	 		    output('tempo fuori range MAX!!!!!!'),
	 			emitevent( robotCmd,  robotCmd ('STOP') ).
	 			
	 	changedModelAction(leds,ledfisico, blink ):- 
	 			emitevent( ledCmdBlink,  ledCmdBlink ).
	 			
	 	changedModelAction(leds,ledfisico, off ):- 
	 			emitevent( ledCmdStop,  ledCmdStop).
	 			
	 	changedModelAction(leds,ledhuelamp, blink ):- 
	 			emitevent( ledCmdBlink,  ledCmdBlink ).
	 			
	 	changedModelAction(leds,ledhuelamp, off ):- 
	 			emitevent( ledCmdStop,  ledCmdStop ).
	}
	Plan init normal [  
		demo consult("./resourceModel.pl");
		delay 3000;
		emit requestNotifier : requestNotifier
	]  
	switchTo initTempTime
	 
	Plan initTempTime[]
	transition stopAfter 3600000   	//1h 
		whenEvent temperatureTimeRequest -> waitForSonar1
	finally repeatPlan
	
	Plan waitForSonar1[
		onEvent temperatureTimeRequest : temperatureTimeRequest(V,T) 
			-> demo changeModelItems(timer,timevalue,T,temperature,temperaturevalue,V)
	]
	transition stopAfter 3600000   	//1h 
		whenEvent roomSonar1Event -> doWork
	finally repeatPlan
	 
	Plan doWork[
		onEvent roomSonar1Event : roomSonar1Event(X) 
			-> println("[INFO] Robot rilevato da sonar1, tutto pronto per ricevere comando di AVVIO")
	]
	transition stopAfter 3600000   	//1h 
		whenEvent userCmd -> userCmdHandler,
		whenEvent temperatureTimeRequest -> updateValues,
		whenEvent robotSonarEvent -> handleRobotSonarEvent,
		whenEvent roomSonar2Event -> handleRoomSonarEvent
	finally repeatPlan
	
	
	Plan updateValues [
		onEvent temperatureTimeRequest : temperatureTimeRequest(V,T) 
			-> demo changeModelItems(timer,timevalue,T,temperature,temperaturevalue,V)
	]switchTo doWork
	
	Plan userCmdHandler resumeLastPlan[
		[not !? alreadyStarted]{
			onEvent userCmd : userCmd('START') -> {
				println("[INFO] Ricevuto da utente comando di avvio");
				
				[!? realrobot ]{
					demo changeModelItem(leds,ledfisico,blink);
					demo changeModelItem(robot,realrobotstatus,on)
				};
				[!? virtualrobot ] {
					demo changeModelItem(leds,ledhuelamp,blink);
					demo changeModelItem(robot,virtualrobotstatus,on)
				};
				delay 1000;
				emit coreCmd : coreCmd('START');
				addRule alreadyStarted
			}
		};
		
		[not !? alreadyStopped]{
			//posso fermarlo SOLO SE E' STATO AVVIATO!
			[!? alreadyStarted] {
					onEvent userCmd : userCmd('STOP') -> {
					println("[INFO] Ricevuto da utente comando di stop");
					
					
					[!? realrobot ]{
						demo changeModelItem(leds,ledfisico,off);
						demo changeModelItem(robot,realrobotstatus,off)
					};
					[!? virtualrobot ]{
						demo changeModelItem(leds,ledhuelamp,off);
						demo changeModelItem(robot,virtualrobotstatus,off)
					};
					delay 1000;
					emit robotCmd : robotCmd ('stop');
					emit coreCmd : coreCmd('STOP');
			
					addRule alreadyStopped
				}
			}
		}
	]
	
	Plan handleRobotSonarEvent [
		onEvent robotSonarEvent : robotSonarEvent(DISTANCE) 
			-> {
				println("[INFO] Ostacolo rilevato, iniziata routine per evitarlo...");
				
				//assumiamo sia stato valutato un ostacolo fisso, quindi da mappare
				emit obstacleFound : obstacleFound( X, Y )
			}
	]switchTo doWork
	
	//gestione degli eventi che provengono dai sonar presenti nella stanza
	Plan handleRoomSonarEvent [
		onEvent roomSonar2Event: roomSonar2Event('-3') 
			-> {
				println("[INFO] Robot vicinissimo al sonar2 ...fermo il robot");
				emit robotCmd : robotCmd ('stop');
				emit coreCmd : coreCmd('STOP')
			};
		onEvent roomSonar2Event: roomSonar2Event(DISTANCE) 
			-> println("[INFO] Robot rilevato da sonar2, muro sul fondo ...inversione robot")
			
	]switchTo doWork
}

QActor mapper context ctxRobot -pubsub {   
	Plan init normal [  
		println("[INFO] Inizializzazione mapper...")
	]  
	switchTo waitForObstacle
	 
	Plan waitForObstacle[
	]
	transition stopAfter 3600000   	//1h 
  		whenEvent obstacleFound -> updateMap
  	finally repeatPlan 
  	
  	Plan updateMap resumeLastPlan[
  		println("[INFO] Aggiornamento mappa con ostacolo fisso")
	] 
}

QActor movecorelogic context ctxRobot -pubsub {   
	Plan init normal [  
		println("[INFO] Inizializzazione del core della logica di movimento")
	]  
	switchTo waitForStart 
	 
	Plan waitForStart[
	]
	transition stopAfter 3600000   	//1h 
  		whenEvent coreCmd -> executionCoreCommand
  	finally repeatPlan 
  	
  	Plan executionCoreCommand [
		onEvent coreCmd : coreCmd ('STOP') -> emit robotCmd : robotCmd ('stop');
		
		onEvent coreCmd : coreCmd ('START') -> {
			println("[INFO] Logica di movimento mette in movimento il robot ed evita gli ostacoli")
//			emit robotCmd : robotCmd ('h');
//			emit robotCmd : robotCmd ('r');
//			emit robotCmd : robotCmd ('l');
//			emit robotCmd : robotCmd ('d')
		}
	]
}


QActor realrobot context ctxRobot -pubsub {   
	Plan init normal [  
		println("[INFO] Accensione del real robot completata!")
	]  
	switchTo waitForCmd 
	 
	Plan waitForCmd[
	]
	transition stopAfter 3600000   	//1h 
  		whenEvent robotCmd -> executionRobotCmdHandler
  	finally repeatPlan 
  	
  	Plan executionRobotCmdHandler resumeLastPlan [
		onEvent robotCmd : robotCmd (X) -> println(X)
	]
}

QActor virtualrobot context ctxRobot -pubsub {   
	Plan init normal [  
		println("[INFO] Accensione del virtual robot completata!")
	]  
	switchTo waitForCmd 
	 
	Plan waitForCmd[
	]transition stopAfter 3600000   	//1h 
  		whenEvent robotCmd -> executionRobotCmdHandler
  	finally repeatPlan 
  	
  	Plan executionRobotCmdHandler resumeLastPlan [
		onEvent robotCmd : robotCmd (X) -> println(X)
	]
}

QActor sonar1 context ctxRobot -pubsub {   
	  
	Plan init normal [  
		println("[INFO] sonar 1 START")
	]  switchTo emitEvent 
  	
  	//simulazione del sonar1
	Plan emitEvent [	
		delay 10000;
		println("[INFO] Sonar1: robot rilevato");
		
		emit roomSonar1Event : roomSonar1Event(X)
	]
}

QActor sonar2 context ctxRobot -pubsub {   
	  
	Plan init normal [  
		println("[INFO] sonar 2 START")
	] switchTo emitEvent 
  	
  	//simulazione del sonar2
	Plan emitEvent [	
		delay 60000;
		println("[INFO] Sonar2: robot rilevato");
		
		emit roomSonar2Event : roomSonar2Event(5)
	]
}

//rappresenta il sonar posto sul robot, che deve captare ostacoli
QActor robotsonar context ctxRobot -pubsub {   
	  
	Plan init normal [  
		println("[INFO] sonar robot START")
	] switchTo emitRobotCmd 
  	
  	//simulazione del sonar
	Plan emitRobotCmd [	
		delay 50000;
		println("[INFO] Sonar robot: rilevato ostacolo");
		
		//emissione evento "ostacolo rilevato"
		emit robotSonarEvent : robotSonarEvent;
		
		delay 55000;
		println("[INFO] Sonar robot: rilevato ostacolo");
		
		//emissione evento "ostacolo rilevato"
		emit robotSonarEvent : robotSonarEvent
	]
}

QActor led context ctxRobot -pubsub { 
		Plan init normal [  
		demo consult("./resourceModel.pl");
		delay 1000;
		println("[INFO] Inizializzazione led")
	] 
	switchTo waitForBlink 
	 
	Plan waitForBlink[
	]
	transition stopAfter 3600000   	//1h 
  		whenEvent ledCmdBlink -> ledOnPlan
  	finally repeatPlan 
  	
  	Plan ledOnPlan [
  		[!? realrobot]
  			println("[INFO] Led ON")
	] transition whenTime 500 -> ledOffPlan
	
	Plan ledOffPlan [
		[!? realrobot]
  			println("[INFO] Led OFF")
	] transition whenTime 500 -> ledOnPlan
		whenEvent ledCmdStop -> stopLed
	finally repeatPlan
	
	Plan stopLed[
  		println("[INFO] Led finisce fase di blink")
	] 
}

QActor ledhuelamp context ctxRobot -pubsub { 
	Plan init normal [
		demo consult("./resourceModel.pl");
		delay 1000;  
		println("[INFO] Inizializzazione led hue lamp")
	] 
	switchTo waitForBlink 
	 
	Plan waitForBlink[
	]
	transition stopAfter 3600000   	//1h 
  		whenEvent ledCmdBlink -> ledOnPlan
  	finally repeatPlan 
  	
  	Plan ledOnPlan [
  		[!? virtualrobot]
  			println("[INFO] Led hue lamp ON")
	] transition whenTime 500 -> ledOffPlan
	
	Plan ledOffPlan [
		[!? virtualrobot]
  			println("[INFO] Led hue lamp OFF")
	] transition whenTime 500 -> ledOnPlan
		whenEvent ledCmdStop -> stopLed
	finally repeatPlan
	
	Plan stopLed[
  		println("[INFO] Led hue lamp finisce fase di blink")
	] 
}

QActor notifier context ctxRobot -pubsub {   
	  
	Plan init normal [  
		println("[INFO] Notifier START")   
	]switchTo waitForFirstRequest
	 
	Plan waitForFirstRequest[]transition stopAfter 3600000   	//1h 
  		whenEvent requestNotifier -> startPolling
  	finally repeatPlan   
  	
  	Plan startPolling [
  		delay 6000;
  		emit requestExternalProvider : requestExternalProvider
	] transition stopAfter 3600000   	//1
		whenEvent  temperatureTimeProviderResponse -> handleRequestTimeAndTemperature
	finally repeatPlan 

  	Plan handleRequestTimeAndTemperature [
		onEvent temperatureTimeProviderResponse : temperatureTimeProviderResponse(V,T) 
		-> emit temperatureTimeRequest : temperatureTimeRequest(V,T)
	] switchTo startPolling
}
