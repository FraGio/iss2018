System problemAnalysisModel

//evento che rappresenta il command (START/STOP) inviato da GUI
Event userCmd : userCmd ( X )

//evento che rappresenta il comand (START o STOP) inviato da GUI a robot
Event robotCmd : robotCmd ( X )

pubSubServer "tcp://localhost"

//contesto PC
Context ctxPC ip [ host="localhost"   port=8020 ] 

QActor pc context ctxPC -pubsub {   
	  
	Plan init normal [  println("pc START")   ]  
	switchTo authenticateUser 
	 
	Plan authenticateUser[
		println("Autenticazione tramite servizio esterno . . . ");
		delay 1000;
		println("Autenticazione riuscita")
	]
	switchTo waitForUserCommand
  	
	Plan waitForUserCommand [
		println("Attesa di comandi utente da GUI")
	]    
  	transition stopAfter 3600000   	//1h 
  		whenEvent userCmd -> userCmdHandler
  	finally repeatPlan  
  	
	Plan userCmdHandler [
		onEvent userCmd : userCmd ("START") -> {
			println("Eseguito comando START");
			emit robotCmd : robotCmd("START")
		};
		onEvent userCmd : userCmd ("STOP") -> {
			println("Eseguito comando STOP");
			emit robotCmd : robotCmd("STOP")
		}
	] 
	switchTo waitForUserCommand
}


//simula l'utente che clicca sui bottoni START/STOP della GUI
QActor user context ctxPC {   
	  
	Plan init normal [  println("utente START")   ]  
	switchTo simulateClick 
  	
  	//simulazione comandi START/STOP
	Plan simulateClick [		
		//simulazione comandi utente
		delay 5000;
		println("Simulazione comando utente START da GUI");
		emit userCmd : userCmd("START");
		delay 5000;
		println("Simulazione comando utente STOP da GUI");
		emit userCmd : userCmd("STOP")		
	]
}