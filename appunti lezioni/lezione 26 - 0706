Tema finale: vogliamo costruire un prodotto sw, che sia distribuito ed eterogeneo.
Si parte dai requisiti espliciti (espressi in linguaggio naturale).
Facciamo attenzione anche al processo di produzione, basato su lavoro cooperativo (boss, committente, team).
Dobbiamo assicurarci che i requisiti siano soddisfatti (unit testing, integration testing, acceptance testing).
Interagire col committente as soon as possible.
Produrre prototipi che siano estendibili. Estendibili, ho due "direzioni":
    - d1: aggiunta incrementale di requisiti
    - d2: dalla logica (analisi) alla tecnologia (implementazione)
Cercare di pianificare/prevedere tempi, costi, strategie di investimento (se qualcosa è già in casa, se vale la pena dare l'attività all'esterno, se produrla in casa, ecc.), formazione del personale.
Lavorare in modo da garantire coerenza e consistenza.
Cercare di limitare al massimo il problema della documentazione finale, incentivando invece la tracciabilità del lavoro. Per fare questo mi avvalgo di strumenti sw.

Analisi della guida Scrum: enfasi su come lavora Scrum, sul significato di "done", sul product ownser, sull'assenza del project manager.
"done" può essere definito a livello globale, di organizzazione o a livello di singoli team.
Guardiamo la struttura in "it.unibo.issMaterial/issdocs/Survey/SCRUM/scrumEntry.html": c'è uno sprint planning, poi dei dalily scrum. Ci sono anche sprint review e retrospective a fine sprint.
Product backlog: ci sono le attività da svolgere.

Non dobbiamo consegnare un documento finale, non bisogna fare il codice e poi alla fine fare una relazione.

Cos'è "sprint retrospective"? Il team guarda sé stesso, si analizza il modo di auto-organizzarsi e del lavoro svolto, in modo da migliorare durante il seguente sprint. E' legata alla sprint review.

Delle due "direzioni" che abbiamo detto, quali sono coperte da scrum? Sicuramente la prima (con backlog), ma la seconda no. Questo perchè scrum è nato come procedura agile.

Il nuovo sprint parte dal precedente, quindi non è che nel modello passo, ad es., da eventi a messaggi, a meno che non segni chiaramente che ho fatto questa variazione e ne tengo traccia del perchè.

Analizziamo i requisiti del tema finale nel documento nodeLab2018.
L'idea è di prendere i requisiti in modo incrementale, ad es. robot che funziona come primo prototipo in una stanza sgombera da ostacoli, poi in un passo successivo includo altri requisiti.

Ricordare che la logica applicativa è molto preziosa, voglio progettarla e mantenerla in maniera indipendente da tutti gli altri componenti del mio sistema. L'input ed output all'inizio saranno mock object, la logica applicativa sarà in un linguaggio qualsiasi ma che sia composta da una sequenza di modelli.
    