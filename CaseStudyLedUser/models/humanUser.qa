/* 
 * =======================================================================================
 * humanUser.qa
 * =======================================================================================
 */        
System humanUser            
Event usercmd     : usercmd(CMD)  					//from web gui
Event userrequest     : userrequest(FLAG)
Event bookingconfirm     : bookingconfirm()
Event release     : release()
Event busy     : busy()
Event robotReleased     : robotReleased()

Dispatch userrequestMsg     : userrequest(FLAG)  //from user
Dispatch bookingconfirmMsg    : bookingconfirm()  //from user
Dispatch releaseMsg     : release()  //from user
Dispatch busyMsg     : busy()  //from user
  
Context ctxHumanUser ip [ host="localhost"   port=8070 ] //-httpserver
Context ctxBookingSystem ip [ host="localhost"   port=8060 ] -standalone  
EventHandler evh1 for usercmd ("book") {	 
    forwardEvent booking -m userrequestMsg	
};
  
QActor human context ctxHumanUser {   
	Plan init normal [       
  	] 
    switchTo waitingForOperation    
    
    Plan waitingForOperation[  ]  
  	transition stopAfter 3600000   	//1h  
  		whenEvent usercmd("book")        -> waitingForConfirm 
  		whenEvent robotReleased       ->  {
  			forwardEvent booking -m userrequestMsg;
  			switchTo waitingForConfirm
  		}	
  	finally repeatPlan  
		
   	Plan waitingForConfirm[  ]  
  	transition stopAfter 3600000   	//1h 
 		whenMsg bookingconfirmMsg   -> controlRobot
 		whenMsg busyMsg   -> waitingForOperation
   	finally repeatPlan    
	   
  	Plan controlRobot resumeLastPlan[     
  		printCurrentMessage;
  		
 		whenEvent usercmd ("release") -> {
 			forwardEvent booking -m releaseMsg
 		}
     	    
   	]           
} 