/* 
 * =======================================================================================
 * bookingSystem.qa
 * =======================================================================================
 */        
System bookingSystem     
       
Event userrequest     : userrequest(FLAG)
Event bookingconfirm     : bookingconfirm()
Event release     : release()
Event busy     : busy()
Event robotReleased     : robotReleased()

Dispatch userrequestMsg     : userrequest(FLAG)  //from user
Dispatch bookingconfirmMsg    : bookingconfirm()  //from user
Dispatch releaseMsg     : release()  //from user
Dispatch busyMsg     : busy()  //from user

  
Context ctxBookingSystem ip [ host="localhost"   port=8060 ] -httpserver     
Context ctxHumanUser ip [ host="localhost" port=8070 ]  -standalone 	 
Context ctMindOfRobot ip [ host="localhost" port=8039 ]  -standalone 

QActor booking context ctxBookingSystem {   
	Plan init normal [       
 	    println("Booking system started...")
  	] 
    switchTo waitForCmd        
		
   	Plan waitForCmd[ 
   		emit robotReleased : robotReleased()
   	]  
  	transition stopAfter 3600000   	//1h 
 		whenMsg userrequest   -> manageRequest 
   	finally repeatPlan    
	   
  	Plan manageRequest resumeLastPlan[     
  		printCurrentMessage;
     	 
    	onMsg userrequestMsg : userrequest( "notify-me " )  -> { 
                forward human -m bookingconfirmMsg : bookingconfirm();
                switchTo busyRobot
        }
        onMsg userrequestMsg : userrequest()  -> { 
                forward human -m bookingconfirmMsg : bookingconfirm();
                switchTo busyRobot
        }
   	]           
   	
   	Plan busyRobot[ ]
   	transition stopAfter 3600000   	//1h 
 		onMsg userrequest : userrequest( "notify-me " )  -> { 
                forward human -m busyMsg : busy();
        }
 		whenMsg releaseMsg   -> switchTo waitForCmd
   	finally repeatPlan    
}
