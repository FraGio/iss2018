System reqAnalysisModel

//evento che rappresenta il comand (START o STOP) inviato da GUI a robot
Event userCmd : userCmd ( X )

//evento che rappresenta il comand (START o STOP) inviato da GUI a robot
Event robotCmd : robotCmd ( X )

//contesto PC
Context ctxPC ip [ host="localhost"   port=8010 ]

//contesto Robot
Context ctxRobot ip [ host="localhost"   port=8011 ]


QActor pc context ctxPC {   
	  
	Plan init normal [  println("pc START")   ]  
	switchTo authenticateUser 
	 
	//Autenticazione utente offerta dalla GUI -> R-Start e R-Stop
	Plan authenticateUser[
		println("Autenticazione OK")
	]
	switchTo waitForUserCommand
  	
  	//attesa di comandi START/STOP -> R-Start e R-Stop
	Plan waitForUserCommand [
		println("Attesa di comandi utente da GUI")
	]    
  	transition stopAfter 3600000   	//1h 
  		whenEvent userCmd -> userCmdHandler
  	finally repeatPlan  
  	
  	//gestione dei comandi ricevuti da GUI  -> R-Start e R-Stop
	Plan userCmdHandler [
		onEvent userCmd : userCmd ("START") -> {
			println("Eseguito comando START");
			emit robotCmd : robotCmd("START")
		};
		onEvent userCmd : userCmd ("STOP") -> {
			println("Eseguito comando STOP");
			emit robotCmd : robotCmd("STOP")
		}
	] 
}

QActor robot context ctxRobot {   
	
	//copre requisito R-TempOk e R-TempKo
	Rules{
		
		//NB: la temperatura deve essere fornita al robot 
		//o reperita da esso tramite un'entità/servizio esterno/a.
		limitTemperatureValue( 25 ).
		changedModelAction( temperature, tempAmbiente, V  ):-
				limitTemperatureValue( MAX ), 
	 		    eval( ge, V , MAX ), !,   
	 		    output('temperatura sopra limite'),
	 			emitevent( robotCmd,  robotCmd ('STOP') ).
	 			
	}
	  
	Plan init normal [  
		demo consult("./resourceModel.pl");  //contains the models and related rules 
		println("robot START")
	]  
	switchTo waitForCmd 
	 
	//Robot attende comandi
	Plan waitForCmd[
		println("Robot in attesa di comandi")
	]
	transition stopAfter 3600000   	//1h 
  		whenEvent robotCmd -> robotCmdHandler
  	finally repeatPlan 
  	
  	//gestione dei comandi ricevuti da GUI
	Plan robotCmdHandler [
		onEvent robotCmd : robotCmd ("START") -> println("Robot attività avviata");
		onEvent robotCmd : robotCmd ("STOP") -> println("Robot attività arrestata")
	] 
}