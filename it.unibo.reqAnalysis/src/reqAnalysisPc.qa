System reqAnalysisModel

//evento che rappresenta il command (START/STOP) inviato da GUI
Event mockUserCmd : mockUserCmd ( X )

//evento che rappresenta il comand (START o STOP) inviato da GUI a robot
Event userCmd : userCmd ( X )

Context ctxPC ip [ host="localhost"   port=8020 ]


QActor pc context ctxPC {   
	  
	Plan init normal [  println("pc START")   ]  
	switchTo authenticateUser 
	 
	//Autenticazione utente offerta dalla GUI -> R-Start e R-Stop
	Plan authenticateUser[
		println("Autenticazione OK")
	]
	switchTo waitForUserCommand
  	
  	//attesa di comandi START/STOP -> R-Start e R-Stop
	Plan waitForUserCommand [
		println("Attesa di comandi utente da GUI")
	]    
  	transition stopAfter 3600000   	//1h 
  		whenEvent mockUserCmd -> mockUserCmdHandler
  	finally repeatPlan  
  	
  	//gestione dei comandi ricevuti da GUI  -> R-Start e R-Stop
	Plan mockUserCmdHandler [
		onEvent mockUserCmd : mockUserCmd ("START") -> {
			println("Eseguito comando START");
			emit userCmd : userCmd("START")
		};
		onEvent mockUserCmd : mockUserCmd ("STOP") -> {
			println("Eseguito comando STOP");
			emit userCmd : userCmd("STOP")
		}
	] 
	switchTo waitForUserCommand
}


//simula l'utente che clicca sui bottoni START/STOP della GUI
QActor user context ctxPC {   
	  
	Plan init normal [  println("utente START")   ]  
	switchTo simulateClick 
  	
	Plan simulateClick [		
		delay 5000;
		println("Simulazione comando utente START da GUI");
		emit mockUserCmd : mockUserCmd("START");
		delay 5000;
		println("Simulazione comando utente STOP da GUI");
		emit mockUserCmd : mockUserCmd("STOP")		
	]
}